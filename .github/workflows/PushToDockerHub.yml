name: Build Docker Image

on:
  push:
    branches:
      - main
      - Dockerhub-test
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
        DOCKERHUB_USERNAME: zibdie
        OFFICIAL_TAG: zibdie/database-operations:latest
        MAIN_REPO_NAME: zibdie/database-operations
        DOCKERFILE_PATH: ./

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install System Dependencies
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Retrieve Docker Credentials
        id: retrieve-credentials
        run: |
          echo "Retrieving Docker credentials..."
          response=$(curl -s -X POST "${{ secrets.ENDPOINT_URL }}" \
            -H "Authorization: ${{ secrets.AUTH_TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "User-Agent: ${{ secrets.GH_USER_AGENT }}" \
            -d '{"key_request": ["DOCKERHUB_KEY"]}')
          
          success=$(echo $response | grep -o '"success":true')
          if [ "$success" ]; then
            dockerKey=$(echo $response | grep -o '"DOCKERHUB_KEY":"[^"]*' | cut -d'"' -f4)
            echo "$dockerKey" > docker-credentials.txt
            echo "Done"
          else
            echo "Failed to retrieve Docker credentials" >&2
            exit 1
          fi

      - name: Log in to Docker Hub
        run: |
          echo "Logging in to Docker Hub..."
          docker_username=${{ env.DOCKERHUB_USERNAME }}
          docker_password=$(cat docker-credentials.txt)
          echo "$docker_password" | docker login -u "$docker_username" --password-stdin
          rm -rf docker-credentials.txt

      - name: Read README content for metadata
        id: readme
        run: |
          content=$(cat README.md)
          escaped_content=$(echo "$content" | jq -Rsa .)
          echo "content=$escaped_content" >> $GITHUB_OUTPUT
          # Save raw content for DockerHub description
          echo "$content" > readme_content.md

      - name: Build and push Docker images
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.DOCKERFILE_PATH }}
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.OFFICIAL_TAG }}
          labels: |
            org.opencontainers.image.description=${{ steps.readme.outputs.content }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}

      - name: Update Docker Hub Description
        run: |
          echo "Updating Docker Hub repository description..."
          # Get Docker Hub token
          docker_username=${{ env.DOCKERHUB_USERNAME }}
          docker_password=$(cat docker-credentials.txt)
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST \
            -d '{"username": "'${docker_username}'", "password": "'${docker_password}'"}' \
            https://hub.docker.com/v2/users/login/ | jq -r .token)
          
          # Extract namespace and repository name
          NAMESPACE=$(echo ${{ env.MAIN_REPO_NAME }} | cut -d '/' -f 1)
          REPO_NAME=$(echo ${{ env.MAIN_REPO_NAME }} | cut -d '/' -f 2)
          
          # Update the repository description
          DESCRIPTION=$(cat readme_content.md)
          PAYLOAD=$(jq -n --arg desc "$DESCRIPTION" --arg full "$DESCRIPTION" '{"description": $desc, "full_description": $full}')
          
          curl -s -H "Authorization: JWT ${TOKEN}" \
            -H "Content-Type: application/json" \
            -X PATCH \
            -d "${PAYLOAD}" \
            "https://hub.docker.com/v2/repositories/${NAMESPACE}/${REPO_NAME}/"
          
          echo "Docker Hub description updated successfully"
          rm -f readme_content.md